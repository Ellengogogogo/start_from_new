version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: property_expose_postgres
    environment:
      POSTGRES_DB: property_expose
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - property_expose_network
    restart: unless-stopped

  # Redis for caching and message queue
  redis:
    image: redis:7-alpine
    container_name: property_expose_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - property_expose_network
    restart: unless-stopped

  # Backend API
  backend:
    build:
      context: ../backend
      dockerfile: Dockerfile
    container_name: property_expose_backend
    environment:
      - DATABASE_URL=postgresql+asyncpg://user:password@postgres:5432/property_expose
      - REDIS_URL=redis://redis:6379
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    ports:
      - "8000:8000"
    volumes:
      - ../backend:/app
      - static_uploads:/app/static/uploads
    depends_on:
      - postgres
      - redis
    networks:
      - property_expose_network
    restart: unless-stopped
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload

  # Worker for background tasks
  worker:
    build:
      context: ../worker
      dockerfile: Dockerfile
    container_name: property_expose_worker
    environment:
      - REDIS_URL=redis://redis:6379
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    volumes:
      - ../worker:/app
      - static_uploads:/app/static/uploads
    depends_on:
      - postgres
      - redis
    networks:
      - property_expose_network
    restart: unless-stopped
    command: python main.py

  # Frontend Next.js
  frontend:
    build:
      context: ../frontend
      dockerfile: Dockerfile
    container_name: property_expose_frontend
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000
    ports:
      - "3000:3000"
    volumes:
      - ../frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - property_expose_network
    restart: unless-stopped
    command: npm run dev

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: property_expose_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
    networks:
      - property_expose_network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  static_uploads:

networks:
  property_expose_network:
    driver: bridge
